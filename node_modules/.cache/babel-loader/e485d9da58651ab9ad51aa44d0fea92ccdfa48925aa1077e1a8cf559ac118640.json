{"ast":null,"code":"var _jsxFileName = \"C:\\\\InterviewPrep\\\\portfolio\\\\src\\\\Component\\\\Context\\\\ProjectState.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ProjectContate from \"./ProjectContate\";\nimport { useRef, useState } from \"react\";\nimport jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProjectState(props) {\n  _s();\n  const resumeRef = useRef();\n  const [pdfPassword, setPdfPassword] = useState(\"\");\n  const handleDownload = async () => {\n    if (!pdfPassword) {\n      alert(\"Please set a password for the PDF!\");\n      return;\n    }\n    const element = resumeRef.current;\n    const canvas = await html2canvas(element, {\n      scale: 2\n    });\n    const imgData = canvas.toDataURL(\"image/png\");\n\n    // Create PDF with encryption\n    const pdf = new jsPDF({\n      orientation: \"portrait\",\n      unit: \"mm\",\n      format: \"a4\",\n      encryption: {\n        userPassword: pdfPassword,\n        ownerPassword: pdfPassword,\n        // or a different one if you want\n        userPermissions: [\"print\", \"modify\", \"copy\", \"annot-forms\"]\n      }\n    });\n    const pageWidth = pdf.internal.pageSize.getWidth();\n    const pageHeight = pdf.internal.pageSize.getHeight();\n    console.log(pageWidth, pageHeight);\n    const imgWidth = pageWidth;\n    const imgHeight = canvas.height * pageWidth / canvas.width;\n    console.log(imgWidth, imgHeight);\n    let position = 0;\n    if (imgHeight > pageHeight) {\n      let heightLeft = imgHeight;\n      while (heightLeft > 0) {\n        pdf.addImage(imgData, \"PNG\", 0, position, imgWidth, imgHeight);\n        heightLeft -= pageHeight;\n        position -= pageHeight;\n        if (heightLeft > 0) {\n          pdf.addPage();\n          position = 0;\n        }\n      }\n    } else {\n      pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\n    }\n    pdf.save(\"Pritam_Muli_Resume_Secure.pdf\");\n  };\n  return /*#__PURE__*/_jsxDEV(ProjectContate.Provider, {\n    value: {\n      pdfPassword,\n      setPdfPassword,\n      handleDownload,\n      resumeRef\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(ProjectState, \"obHNTaFWv0djsryWXDdefPPkGMI=\");\n_c = ProjectState;\nexport default ProjectState;\nvar _c;\n$RefreshReg$(_c, \"ProjectState\");","map":{"version":3,"names":["React","ProjectContate","useRef","useState","jsPDF","html2canvas","jsxDEV","_jsxDEV","ProjectState","props","_s","resumeRef","pdfPassword","setPdfPassword","handleDownload","alert","element","current","canvas","scale","imgData","toDataURL","pdf","orientation","unit","format","encryption","userPassword","ownerPassword","userPermissions","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","console","log","imgWidth","imgHeight","height","width","position","heightLeft","addImage","addPage","save","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/InterviewPrep/portfolio/src/Component/Context/ProjectState.js"],"sourcesContent":["import React from \"react\";\r\nimport ProjectContate from \"./ProjectContate\";\r\nimport { useRef, useState } from \"react\";\r\nimport jsPDF from \"jspdf\";\r\nimport html2canvas from \"html2canvas\";\r\n\r\nfunction ProjectState(props) {\r\n    const resumeRef = useRef();\r\n      const [pdfPassword, setPdfPassword] = useState(\"\");\r\n    \r\n      const handleDownload = async () => {\r\n        if (!pdfPassword) {\r\n          alert(\"Please set a password for the PDF!\");\r\n          return;\r\n        }\r\n    \r\n        const element = resumeRef.current;\r\n        const canvas = await html2canvas(element, { scale: 2 });\r\n        const imgData = canvas.toDataURL(\"image/png\");\r\n    \r\n        // Create PDF with encryption\r\n        const pdf = new jsPDF({\r\n          orientation: \"portrait\",\r\n          unit: \"mm\",\r\n          format: \"a4\",\r\n          encryption: {\r\n            userPassword: pdfPassword,\r\n            ownerPassword: pdfPassword, // or a different one if you want\r\n            userPermissions: [\"print\", \"modify\", \"copy\", \"annot-forms\"],\r\n          },\r\n        });\r\n    \r\n        const pageWidth = pdf.internal.pageSize.getWidth();\r\n        const pageHeight = pdf.internal.pageSize.getHeight();\r\n    \r\n        console.log(pageWidth, pageHeight);\r\n    \r\n        const imgWidth = pageWidth;\r\n        const imgHeight = (canvas.height * pageWidth) / canvas.width;\r\n    \r\n        console.log(imgWidth, imgHeight);\r\n        let position = 0;\r\n    \r\n        if (imgHeight > pageHeight) {\r\n          let heightLeft = imgHeight;\r\n          while (heightLeft > 0) {\r\n            pdf.addImage(imgData, \"PNG\", 0, position, imgWidth, imgHeight);\r\n            heightLeft -= pageHeight;\r\n            position -= pageHeight;\r\n            if (heightLeft > 0) {\r\n              pdf.addPage();\r\n              position = 0;\r\n            }\r\n          }\r\n        } else {\r\n          pdf.addImage(imgData, \"PNG\", 0, 0, imgWidth, imgHeight);\r\n        }\r\n    \r\n        pdf.save(\"Pritam_Muli_Resume_Secure.pdf\");\r\n      };\r\n    \r\n  return (\r\n    <ProjectContate.Provider value={{pdfPassword, setPdfPassword, handleDownload, resumeRef}}>\r\n      {props.children}\r\n    </ProjectContate.Provider>\r\n  );\r\n}\r\n\r\nexport default ProjectState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}